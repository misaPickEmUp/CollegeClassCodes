/*
 Program Requirements:

 Your program should provide the receptionist with a menu-driven interface to perform the following operations:
 Exit the Program

 
 Feel free to introduce additional helper functions as needed to improve clarity and structure.



 Data Structures:

 Use two parallel vector<string> containers:

 One to store patient names
 One to store their corresponding reasons for visit
 Ensure both vectors stay synchronized — i.e., the name at index i corresponds to the reason at index i.



 Input Validation:

 Do not allow empty names or reasons.
 Handle invalid menu options gracefully.

 */

#include <iostream>
#include <vector>
#include <string>
using namespace std;

//prelist functions
void displayMenu();
void registerPatient(vector<string>& names, vector<string>& reasons);
void listPatients(const vector<string>& names, const vector<string>& reasons);
void callNextPatient(vector<string>& names, vector<string>& reasons);
void searchPatient(const vector<string>& names);

//start main function
int main(){
//menu/  --- Health Clinic Patient Queue System ---
    vector<string> PNames;
    vector<string> PReasons;
    int userchoice = 0;
    displayMenu();
    cin >> userchoice;
    switch(userchoice){
        case 1:
            registerPatient(PNames, PReasons);
        break;
        case 2:
            listPatients(PNames, PReasons);
        break;
        case 3:
            callNextPatient(PNames, PReasons);
        break;
        case 4:
            searchPatient(PNames);
        break;
        case 5:
            cout << "You chose exit. Goodbye!";
            return 0;
        break;
            
        default:
            cout << "That is not a valid input";
        break;
    }
    
    
    
    
    return 0;
}

void displayMenu(){
    cout << "1. Register a new patient\n";
    cout << "2. List all waiting patients\n";
    cout << "3. Call next patient\n";
    cout << "4. Search for a patient by name\n";
    cout << "5. Exit\n";
    cout << "Enter your choice: ";
}
void registerPatient(vector<string>& names, vector<string>& reasons){
    cout << "Enter your first and last name with a space inbetween\n";
    string userchoice;
    getline(cin, userchoice);
    names.push_back(userchoice);
    
    userchoice.clear();
    cout << "Enter your reason for visiting today\n";
    getline(cin, userchoice);
    reasons.push_back(userchoice);
// Register a New Patient
// Prompt for patient’s full name and reason for visit.
//  Add the patient to a queue (maintain order of arrival using a vector).
}
void listPatients(const vector<string>& names, const vector<string>& reasons){
    cout << "The current patients waiting are: \n";
    for(int i=0; i < names.size(); i++){
        cout << "Patient: " << names.at(i) << endl;
        cout << "Reason for visit: " << reasons.at(i) << endl;
//List All Waiting Patients
//Display a numbered list of all patients currently waiting, showing name and reason for visit.
}}
void callNextPatient(vector<string>& names, vector<string>& reasons){
    if(names.size() != 0){
        cout << "Calling next patient: " << names.at(0) << ". Reason for visiting: " << reasons.at(0);
        cout << "Patient: " << names.at(0) << " has been removed from the system.";
        names.erase(names.begin());
        reasons.erase(reasons.begin());
    }else{
        cout << "There are no patients currently waiting.";
    }
//Call Next Patient
//Remove the first patient in the queue and display their name and reason for visit.
//If no patients are waiting, display a message indicating so.
}
void searchPatient(const vector<string>& names){
    string usercheck;
    cout << "Enter name for patient you would like to look for: \n";
    getline(cin, usercheck);
    if(usercheck.empty()){ cout << "Name cannot be empty.\n"; return;}
    
    bool checking = false;
    for (const string& name : names) {
        if (name == usercheck) {
            checking = true;
            break;}}
    
    if (checking){
        cout << "Patient \"" << usercheck << "\" is currently in the queue.\n";
    } else {
        cout << "Patient \"" << usercheck << "\" is not found in the queue.\n";
    }
    
}











/*
 Objective:

 Design and implement a modular C++ program using vectors that simulates a simple patient check-in system for a health clinic. The program will be used by the clinic’s receptionist to register new patients and manage the order in which they should be seen.



 Background:

 In a typical clinic, the receptionist is responsible for signing in patients and maintaining the queue of who is to be seen next by the doctor. Your task is to build a command-line interface that helps automate this process.

 This assignment will give you practice in:

 Modular program design using functions
 Use of vectors to manage dynamic lists
 Input validation and basic control structures

 */
