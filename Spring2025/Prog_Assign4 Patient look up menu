#include <iostream>
#include <vector>
#include <string>
#include <limits>
using namespace std;

//prelist functions
void displayMenu();
void registerPatient(vector<string>& names, vector<string>& reasons);
void listPatients(const vector<string>& names, const vector<string>& reasons);
void callNextPatient(vector<string>& names, vector<string>& reasons);
void searchPatient(const vector<string>& names);

//start main function
int main(){
    int userchoice = 0;
    vector<string> PNames;
    vector<string> PReasons;
    do{
        //menu/  --- Health Clinic Patient Queue System ---
        displayMenu();
        cin >> userchoice;
        switch(userchoice){
            case 1:
                registerPatient(PNames, PReasons);
                break;
            case 2:
                listPatients(PNames, PReasons);
                break;
            case 3:
                callNextPatient(PNames, PReasons);
                break;
            case 4:
                searchPatient(PNames);
                break;
            case 5:
                cout << "You chose exit. Goodbye!\n";
                return 0;
                break;
                
            default:
                cout << "That is not a valid input.\n";
                break;
        }

    }while(userchoice != 5);
    
    
    
    return 0;
}

void displayMenu(){
    cout << "--- Health Clinic Patient Queue System ---\n";
    cout << "1. Register a new patient\n";
    cout << "2. List all waiting patients\n";
    cout << "3. Call next patient\n";
    cout << "4. Search for a patient by name\n";
    cout << "5. Exit\n";
    cout << "Enter your choice: ";
}
void registerPatient(vector<string>& names, vector<string>& reasons){
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    string usernam;
    cout << "Enter your first and last name with a space inbetween\n";
    do{
        getline(cin, usernam);
        if(usernam.empty()){
            cout << "Not a valid input. Try again.\n";
        }
    }while(usernam.empty());
    names.push_back(usernam);
    
    string userres;
    cout << "Enter your reason for visiting today\n";
    do{
        getline(cin, userres);
        if(userres.empty()){
            cout << "Not a valid input. Try again.\n";
        }
    }while(userres.empty());
    reasons.push_back(userres);
// Register a New Patient
// Prompt for patientâ€™s full name and reason for visit.
//  Add the patient to a queue (maintain order of arrival using a vector).
}
void listPatients(const vector<string>& names, const vector<string>& reasons){
    if(names.size() > 0){
        cout << "The current patients waiting are: \n";
        for(int i=0; i < names.size(); i++){
            cout << "(" << i+1 << ") " << "Patient: " << names.at(i) << endl;
            cout << "(" << i+1 << ") " << "Reason for visit: " << reasons.at(i) << endl;
        }}else{
            cout << "There are no current patients.\n";
        }
//List All Waiting Patients
//Display a numbered list of all patients currently waiting, showing name and reason for visit.
}
void callNextPatient(vector<string>& names, vector<string>& reasons){
    if(names.size() != 0){
        cout << "Calling next patient: " << names.at(0) << ".\nReason for visiting: " << reasons.at(0);
        cout << "\nPatient: " << names.at(0) << " has been removed from the system.\n";
        names.erase(names.begin());
        reasons.erase(reasons.begin());
    }else{
        cout << "There are no patients currently waiting.";
    }
//Call Next Patient
//Remove the first patient in the queue and display their name and reason for visit.
//If no patients are waiting, display a message indicating so.
}
void searchPatient(const vector<string>& names){
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    string usercheck;
    cout << "Enter name for patient you would like to look for: \n";
    getline(cin, usercheck);
    if(usercheck.empty()){ cout << "Name cannot be empty.\n"; return;}
    
    bool checking = false;
    for (const string& name : names) {
        if (name == usercheck) {
            checking = true;
            break;}}
    
    if (checking){
        cout << "Patient \"" << usercheck << "\" is currently in the queue.\n";
    } else {
        cout << "Patient \"" << usercheck << "\" is not found in the queue.\n";
    }
    
}
