#include <iostream>
#include <chrono>
#include <thread>
using namespace std;

int main(){
// ------------------ Assignment: Build a Text-Based Adventure Game ------------------
//story frame work: a knight must accept his responsibility and fight a dragon
    cout << "Introduction: You are a royal knight of the Imperial Guard. In recent times the kingdom has fallen victim to a terrible dragon. The homes and crops of your citizens have been oblitarated. It is your responsibility to SLAY the wild beast, and restore peace to your kingdom.\n";
    
    char StartingInput;
        cout << "What is your first move?\n";
        cout << "(A) Gear up for BATTLE. The kingdom must be protected\n";
        cout << "(B) Approach the Imperial General to get an analysis of the situation\n";
        cout << "(C) Sneak into Royal chambers to asses current assets\n";
        cin >> StartingInput;
    if(StartingInput != 'A' && StartingInput != 'B' && StartingInput != 'C'){
        do{
            cout << "Errrr buddy. You have to pick one of the options I give you.\n";
            cin >> StartingInput;
        }while(StartingInput != 'A' && StartingInput != 'B' && StartingInput != 'C');
    }
    
    
//starting point in story tree: 'A' the player will go into battle, 'B' the player will check and fight or flee, 'C' the player will loot the castle and flee(the smart choice)(duh)
    bool CorrectChoice = true;
    do{
        switch(StartingInput){
            case 'A':
                CorrectChoice = false;
                char GearInput;
                cout << "CONGRAGULATIONS! You have chosen correctly. \nAs you enter the armoury you see a wide selection of weapons and armour. You can only carry a certain amount of gear so you much choose carefully.\n";
                cout << "What will be your loadout?\n";
                cout << "(A) Sword and Shield with a full set of Armour.(Armour +100 / Damage +100 / Weight +100)\n";
                cout << "(B) Bow and Arrow with light armour------------(Armour +20 / Damage +35 / Weight +15)\n";
                cout << "(C) Bring the Bticky for when it gets Sticky---(Armour 0 / Damage ??? / Weight +5)\n";
                cin >> GearInput;
                /*  if(GearInput == 'A'){
                 cout << "Your equipment's heavy weight pervents you riding a horse to the dragon. Your journey took 10 days(seconds).\n";
                 this_thread::sleep_for(chrono::seconds(10));
                 cout << "10 Days have passed. READY UP!\n";
                 cout <<
                 }else if(GearInput == 'B' || GearInput == 'C'){
                 cout << "Your equipment's light weight allows you to ride a horse to the dragons location within a reasonable time(smart thinking).\n";
                 }
                 */
                
                break;
                
                
                
                
                
                
                
                
                
                
                
                
            case 'B':
                CorrectChoice = false;

                break;
            case 'C':
                CorrectChoice = false;

                
                break;
            default:
                cout << "Come on bruh we already went through this... Pick again.\n";

            break;}
    }while(CorrectChoice);
    
           
    return 0;
}






/*

 Requirements

 Your game must include:


 At least three major decision
 points where the player must choose between two or more options
 
 At least two different possible endings,
 depending on the choices the player makes
 Navigation or Choices

 Allow the player to move through a few "rooms" or areas (e.g., forest → cave → treasure room)
 OR make decisions that branch the story (e.g., trust a character or not, explore vs hide)
 Object Interaction or Score Tracking (Optional)

 Introduce a very simple inventory item (e.g., a key, flashlight) or score system
 Track if the player "wins" based on collecting something or reaching a certain score
 Text-based UI

 All interactions happen via printed text and user input (no graphics necessary)


 Basic Code Structure

 Use variables to store decisions or track score
 Organize your code for readability (functions encouraged but not required)
 Add a map or visual ASCII art
 Create a save/load feature
 Implement a loop that allows the user to play again
 Add random events using a random number generator


 Submission Instructions

 Submit the following:

 Your completed .cpp file.
 
 ----------------------------------------------
 Overview

 In this assignment, you will design and implement a simple text-based adventure game. The goal is to create an interactive story where the user makes choices that influence the direction and outcome of the game. The setting can be anything you like — a haunted house, a fantasy world, a science lab, or even a day in the life of a student. The important part is that player decisions matter and lead to different paths and outcomes.
 
 */
